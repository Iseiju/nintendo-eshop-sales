import { EShop, EURequestOptions, GameEU, GameJP, GameUS, PriceResponse, Region, TitleData, USRequestOptions } from './interfaces';
/**
 * Fetches all games on american eshops
 *
 * Paginates every 200 games, _(maximum item count per request)_
 * @param {USRequestOptions} [options] (Optional) Options for the request
 * @param {number} [offset] (Optional) Offset to start searching at
 * @param {string[]} [games] (Optional) Array of games to filter by
 * @returns {Promise<GameUS[]>} Promise containing all the games
 * @method
 */
export declare const getGamesAmerica: (options?: USRequestOptions, offset?: number, games?: GameUS[]) => Promise<any>;
/**
 * Fetches all games on japanese eShops
 * @returns {Promise<GameJP[]>} Promise containing all the games
 * @method
 * @name getGamesJapan
 */
export declare const getGamesJapan: () => Promise<GameJP[]>;
/**
 * Fetches all games on european eShops
 * @param {EURequestOptions} [options] (Optional) Options for the request
 * @returns {Promise<GameUS[]>} Promise containing all the games
 * @method
 * @name getGamesEurope
 */
export declare const getGamesEurope: (options?: EURequestOptions) => Promise<GameEU[]>;
/**
 * Get pricing information for the requested games. Paginates every 50 games.
 * @param {string} country A two digit country code. (ISO 3166-1 alpha-2 country code)
 * @param {string[] | string} gameIds One or more NSUID of the corresponding games.
 * @param {number} [offset] (Optional) The offset to start at
 * @param {TitleData[]} [prices] (Optional) An array of {@link TitleData}
 * @return {Promise<PriceResponse>} A promise containing the pricing information.
 * @method
 * @name getPrices
 */
export declare const getPrices: (country: string, gameIds: string | string[], offset?: number, prices?: TitleData[]) => Promise<PriceResponse>;
/**
 * Gets all active eShops given a list of countries.
 * @param {string[]} countryCodes A list of 2 digit country codes for every country eShop to lookup. (ISO 3166-1 alpha-2 country codes)
 * @param {string} gameCode A 14 digits game NSUID from the desired region.
 * @param {Region} region A region id that will be appended in the final shop object for filtering purposes.
 * @returns {Promise<EShop[]>} A list of shop objects with country code, name and default currency.
 * @method
 * @name getShopsByCountryCodes
 */
export declare const getShopsByCountryCodes: (countryCodes: string[], gameCode: string, region: Region) => Promise<EShop[]>;
/**
 * Gets all active eShops on American countries.
 * This method will launch several requests at nintendo web services, so don't abuse it.
 * @returns {Promise<EShop[]>} A list of shop objects with country code, name and default currency.
 * @method
 * @name getShopsAmerica
 */
export declare const getShopsAmerica: () => Promise<EShop[]>;
/**
 * Gets all active eShops on European countries.
 * This method will launch several requests at nintendo web services, so don't abuse it.
 * @returns {Promise<EShop[]>} A list of shop objects with country code, name and default currency.
 * @method
 * @name getShopsEurope
 */
export declare const getShopsEurope: () => Promise<EShop[]>;
/**
 * Gets all active eShops on Asian countries
 * This method will launch several requests at nintendo web services, so don't abuse it.
 * @returns {Promise<EShop[]>} A list of shop objects with country code, name and default currency.
 * @method
 * @name getShopsAsia
 */
export declare const getShopsAsia: () => Promise<EShop[]>;
/**
 * Gets all active eShops.
 * This method will launch several requests at nintendo web services, so don't abuse it.
 * @returns {Promise<EShop[]>} A list of shop objects with country code, name and default currency.
 * @method
 * @name getActiveShops
 */
export declare const getActiveShops: () => Promise<EShop[]>;
/**
 * Parses the game code to extract the cross-region protion.
 * @param {GameUS | GameEU | GameJP} game The game object returned from one of the other methods.
 * @param {Region} region Region code
 * @returns {string | null} The 4-digit resulting game code
 * @method
 * @name parseGameCode
 */
export declare const parseGameCode: (game: GameUS | GameJP | GameEU, region: Region) => string | null;
/**
 * Extracts NSUID information from the game object.
 * @param {GameUS | GameEU | GameJP} game The game object returned from one of the other methods.
 * @param {Region} region Region code
 * @returns {string | null} The 14-digits NSUID
 * @method
 * @name parseNSUID
 */
export declare const parseNSUID: (game: GameUS | GameJP | GameEU, region: Region) => string | null;
