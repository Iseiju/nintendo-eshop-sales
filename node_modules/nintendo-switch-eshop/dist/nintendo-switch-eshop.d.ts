import { EShop, EURequestOptions, GameEU, GameJP, GameUS, PriceResponse, Region, TitleData, USRequestOptions } from './interfaces';
/**
 * Fetches all games on american eshops
 *
 * @remarks
 * Paginates every 200 games, _(maximum item count per request)_
 *
 * @param options _(Optional)_ Options for the request
 * @param offset _(Optional)_ Offset to start searching at
 * @param games _(Optional)_ Array of games to filter by
 * @returns Promise containing all the games
 */
export declare const getGamesAmerica: (options?: USRequestOptions, offset?: number, games?: GameUS[]) => Promise<GameUS[]>;
/**
 * Fetches all games on japanese eShops
 *
 * @returns Promise containing all the games
 */
export declare const getGamesJapan: () => Promise<GameJP[]>;
/**
 * Fetches all games on the European, Australian or New Zealand eShops
 *
 * @remarks
 * Games from Australia / New Zealand can be limited. They are included only as much as that Nintendo assigns them properly to the PAL region
 *
 * @param options - Request options to pass to the eShop request {@link EURequestOptions | See EURequestOptions for details}
 * @returns Promise containing all requested EU/PAL games
 */
export declare const getGamesEurope: (options?: EURequestOptions) => Promise<GameEU[]>;
/**
 * Gets pricing information for the requested games. Paginates every 50 games.
 *
 * @param country A two digit country code. (ISO 3166-1 alpha-2 country code)
 * @param gameIds One or more NSUID of the corresponding games.
 * @param offset _(Optional)_ The offset to start at
 * @param prices _(Optional)_ An array of {@link TitleData}
 * @returns A promise containing the pricing information.
 */
export declare const getPrices: (country: string, gameIds: string | string[], offset?: number, prices?: TitleData[]) => Promise<PriceResponse>;
/**
 * Gets all active eShops given a list of countries.
 *
 * @param countryCodes A list of 2 digit country codes for every country eShop to lookup. (ISO 3166-1 alpha-2 country codes)
 * @param gameCode A 14 digits game NSUID from the desired region.
 * @param region A region id that will be appended in the final shop object for filtering purposes.
 * @returns A list of shop objects with country code, name and default currency.
 */
export declare const getShopsByCountryCodes: (countryCodes: string[], gameCode: string, region: Region) => Promise<EShop[]>;
/**
 * Gets all active eShops on American countries.
 *
 * @remarks
 * This method will launch several requests at nintendo web services, so don't abuse it.
 *
 * @returns A list of shop objects with country code, name and default currency.
 */
export declare const getShopsAmerica: () => Promise<EShop[]>;
/**
 * Gets all active eShops on European countries.
 *
 * @remarks
 * This method will launch several requests at nintendo web services, so don't abuse it.
 *
 * @returns A list of shop objects with country code, name and default currency.
 */
export declare const getShopsEurope: () => Promise<EShop[]>;
/**
 * Gets all active eShops on Asian countries
 *
 * @remarks
 * This method will launch several requests at nintendo web services, so don't abuse it.
 *
 * @returns A list of shop objects with country code, name and default currency.
 */
export declare const getShopsAsia: () => Promise<EShop[]>;
/**
 * Gets all active eShops.
 *
 * @remarks
 * This method will launch several requests at nintendo web services, so don't abuse it.
 *
 * @returns A list of shop objects with country code, name and default currency.
 */
export declare const getActiveShops: () => Promise<EShop[]>;
/**
 * Parses the game code to extract the cross-region portion.
 *
 * @param game The game object returned from one of the other methods.
 * @param region Region code
 * @returns The 4-digit resulting game code
 */
export declare const parseGameCode: (game: GameEU | GameUS | GameJP, region: Region) => string | null;
/**
 * Extracts NSUID information from the game object.
 *
 * @param game The game object returned from one of the other methods.
 * @param region Region code
 * @returns The 14-digits NSUID
 */
export declare const parseNSUID: (game: GameEU | GameUS | GameJP, region: Region) => string | null;
//# sourceMappingURL=nintendo-switch-eshop.d.ts.map