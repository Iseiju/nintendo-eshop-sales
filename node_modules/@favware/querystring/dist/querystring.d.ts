import { ParseOptions, QuerystringObject, StringifyOptions } from './types';
/**
 * Stringifies an object
 *
 * @param obj Object to stringify
 * @param options Options for the stringify, see {@link IStringifyOptions}
 * @returns The stringified query object
 * @example
 * ```ts
 * stringify({prop: 'value', prop2: 'value2'})
 * ```
 *
 * @example
 * ```ts
 * stringify({prop: 'value', prop2: 'value2'}, {separator: '&', equals: '=', includeQuestion: false})
 * ```
 *
 * @example
 * ```ts
 * stringify({prop: 'value', prop2: 'value2'}, {separator: '&&', equals: '=', includeQuestion: true})
 * ```
 */
export declare const stringify: (obj: QuerystringObject, options?: StringifyOptions) => string;
/**
 * Parses a querystring back to an object
 *
 * @param qs Querystring to parse
 * @param options Options for the parse, see {@link IParseOptions}
 * @returns A JavaScript object of the parsed parameters
 * @example
 * ```ts
 * parse('?prop=value&prop2=value2')
 * ```
 *
 * @example
 * ```ts
 * parse('?prop=value&prop2=value2', {separator: '&', equals: '='})
 * ```
 *
 * @example
 * ```ts
 * parse('prop=value&&prop2=value2', {separator: '&&', equals: '='})
 * ```
 */
export declare const parse: (qs?: string, options?: ParseOptions) => QuerystringObject;
export default stringify;
