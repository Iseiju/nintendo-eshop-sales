{"version":3,"file":"index.js","sources":["../src/types.ts","../src/querystring.ts"],"sourcesContent":["/** Options for the {@link stringify} function */\nexport interface StringifyOptions {\n  /** Separator the querystring should get */\n  separator?: string;\n  /** Equals sign the querystring should use */\n  equals?: string;\n  /** Whether the querystring should be automatically prefixed with a `?` */\n  includeQuestion?: boolean;\n}\n\n/** Options for the {@link parse} function */\nexport interface ParseOptions {\n  /** Separator the querystring has */\n  separator?: string;\n  /** Equals sign the querystring has */\n  equals?: string;\n}\n\n/** Generic object for type definitions */\nexport interface QuerystringObject {\n  /** String based key with value of any type */\n  [key: string]: string | number | boolean | any; // eslint-disable-line @typescript-eslint/no-explicit-any\n}\n\n/** Extension to generic object defining an absolute error property */\nexport type QuerystringError = {\n  /** Error with a string value */\n  err: string;\n} & QuerystringObject;\n\n/** Predefined potential sources for errors */\nexport enum FunctionSource {\n  /** For when the source is {@link parse} */\n  Parse = 'parse',\n  /** For when the source is {@link stringify} */\n  Stringify = 'stringify',\n}","import { FunctionSource, ParseOptions, QuerystringError, QuerystringObject, StringifyOptions } from './types';\n\n/**\n * Checks what kind of primitive type the property is and transforms accordingly\n *\n * @remarks\n * Used for stringify\n *\n * @param v Input to check for primitive type\n */\nconst stringifyPrimitive = (v: any): string => { // eslint-disable-line @typescript-eslint/no-explicit-any\n  switch (typeof v) {\n    case 'string':\n      return v;\n    case 'boolean':\n      return v ? 'true' : 'false';\n    case 'number':\n      return isFinite(v) ? v.toString() : '';\n    default:\n      return '';\n  }\n};\n\n/**\n * Gracefully handles errors thrown by other functions\n *\n * @param err The error message to parse\n * @param source The source of the error, one of {@link FunctionSource}\n */\nconst handleQuerystringError = (err: string, source: FunctionSource): string | QuerystringError => {\n  switch (source) {\n    case FunctionSource.Parse:\n      return { err };\n    case FunctionSource.Stringify:\n    default:\n      return err;\n  }\n};\n\n/**\n * Stringifies an object\n *\n * @param obj Object to stringify\n * @param options Options for the stringify, see {@link IStringifyOptions}\n * @returns The stringified query object\n */\nexport const stringify = (obj: QuerystringObject, options: StringifyOptions = { separator: '&', equals: '=', includeQuestion: false }): string => {\n  try {\n    if (!obj || Object.keys(obj).length <= 0) throw new Error('object_is_empty');\n    if (typeof obj !== 'object') throw new Error('input_not_object');\n    if (!options.separator) options.separator = '&';\n    if (!options.equals) options.equals = '=';\n    if (!options.includeQuestion) options.includeQuestion = false;\n    const keys = Object.keys(obj).sort() // eslint-disable-line @typescript-eslint/require-array-sort-compare\n      .map(key => {\n        const ks = encodeURIComponent(stringifyPrimitive(key)) + options.equals!;\n        if (obj[key] === undefined || obj[key] === null) return '';\n        if (Array.isArray(obj[key])) {\n          return obj[key]\n            .map((v: string) => ks + encodeURIComponent(stringifyPrimitive(v)))\n            .join(options.separator);\n        }\n\n        return (\n          ks + encodeURIComponent(stringifyPrimitive(obj[key]))\n        );\n      }).filter(Boolean);\n\n    if (options.includeQuestion) keys[0] = `?${keys[0]}`;\n\n    return keys.join(options.separator);\n  } catch (err) {\n    if (/object_is_empty/i.test(err.toString())) {\n      return `${options.includeQuestion ? '?' : ''}${encodeURIComponent(stringifyPrimitive(obj))}`;\n    }\n    if (/input_not_object/i.test(err.toString())) {\n      return handleQuerystringError(\n        '@Favware/Querystring: Your input was not an object. Please supply an object when using Stringify',\n        FunctionSource.Stringify\n      ) as string;\n    }\n\n    return err;\n  }\n};\n\n/**\n * Parses a querystring back to an object\n *\n * @param qs Querystring to parse\n * @param options Options for the parse, see {@link IParseOptions}\n * @returns A JavaScript object of the parsed parameters\n */\nexport const parse = (qs = '', options: ParseOptions = { separator: '&', equals: '=' }): QuerystringObject => {\n  try {\n    if (typeof qs !== 'string') throw new Error('input_not_string');\n    if (qs === '') return {};\n    if (/^https?:\\/\\//.test(qs)) qs = qs.split('?')[1];\n    if (!options.separator) options.separator = '&';\n    if (!options.equals) options.equals = '=';\n    if (qs.startsWith('?')) qs = qs.slice(1);\n    const obj: QuerystringObject = {};\n    const regexp = /\\+/g;\n    const queries: string[] = qs.split(options.separator);\n    const maxKeys = 1000;\n\n    let len = queries.length;\n    if (maxKeys > 0 && len > maxKeys) len = maxKeys;\n\n    for (const query of queries) {\n      const x = query.replace(regexp, '%20');\n      const idx = x.indexOf(options.equals);\n      let kstr;\n      let vstr;\n\n      if (idx >= 0) {\n        kstr = x.substr(0, idx);\n        vstr = x.substr(idx + 1);\n      } else {\n        kstr = x;\n        vstr = '';\n      }\n\n      const k = decodeURIComponent(kstr);\n      const v = decodeURIComponent(vstr);\n\n      if (!obj.hasOwnProperty(k)) {\n        obj[k] = v;\n      } else if (Array.isArray(obj[k])) {\n        obj[k].push(v);\n      } else {\n        obj[k] = [ obj[k], v ];\n      }\n    }\n\n    return obj;\n  } catch (err) {\n    if (/input_not_string/i.test(err.toString())) {\n      return handleQuerystringError(\n        '@Favware/Querystring: Your input was not an string. Please supply a string when using Parse',\n        FunctionSource.Parse\n      ) as QuerystringError;\n    }\n\n    return err;\n  }\n};\n\nexport default stringify;"],"names":["FunctionSource","stringifyPrimitive","v","isFinite","toString","handleQuerystringError","err","source","Parse","Stringify","stringify","obj","options","separator","equals","includeQuestion","Object","keys","length","Error","sort","map","key","ks","encodeURIComponent","Array","isArray","join","filter","Boolean","test","parse","qs","split","startsWith","slice","regexp","queries","len","queries_1","_i","x","replace","idx","indexOf","kstr","vstr","substr","k","decodeURIComponent","hasOwnProperty","push"],"mappings":"oEA+BA,SAAYA,GAEVA,gBAEAA,wBAJF,CAAYA,yBAAAA,4BCrBZ,IAAMC,mBAAqB,SAACC,GAC1B,cAAeA,GACb,IAAK,SACH,OAAOA,EACT,IAAK,UACH,OAAOA,EAAI,OAAS,QACtB,IAAK,SACH,OAAOC,SAASD,GAAKA,EAAEE,WAAa,GACtC,QACE,MAAO,KAUPC,uBAAyB,SAACC,EAAaC,GAC3C,OAAQA,GACN,KAAKP,uBAAeQ,MAClB,MAAO,CAAEF,OACX,KAAKN,uBAAeS,UACpB,QACE,OAAOH,IAWAI,UAAY,SAACC,EAAwBC,gBAAAA,GAA8BC,UAAW,IAAKC,OAAQ,IAAKC,qBAC3G,IACE,IAAKJ,GAAOK,OAAOC,KAAKN,GAAKO,QAAU,EAAG,MAAM,IAAIC,MAAM,mBAC1D,GAAmB,iBAARR,EAAkB,MAAM,IAAIQ,MAAM,oBACxCP,EAAQC,YAAWD,EAAQC,UAAY,KACvCD,EAAQE,SAAQF,EAAQE,OAAS,KACjCF,EAAQG,kBAAiBH,EAAQG,oBACtC,IAAME,EAAOD,OAAOC,KAAKN,GAAKS,OAC3BC,cAAIC,GACH,IAAMC,EAAKC,mBAAmBvB,mBAAmBqB,IAAQV,EAAQE,OACjE,gBAAIH,EAAIW,IAAmC,OAAbX,EAAIW,GAAsB,GACpDG,MAAMC,QAAQf,EAAIW,IACbX,EAAIW,GACRD,cAAKnB,GAAc,OAAAqB,EAAKC,mBAAmBvB,mBAAmBC,OAC9DyB,KAAKf,EAAQC,WAIhBU,EAAKC,mBAAmBvB,mBAAmBU,EAAIW,QAEhDM,OAAOC,SAIZ,OAFIjB,EAAQG,kBAAiBE,EAAK,GAAK,IAAIA,EAAK,IAEzCA,EAAKU,KAAKf,EAAQC,WACzB,MAAOP,GACP,MAAI,mBAAmBwB,KAAKxB,EAAIF,aACpBQ,EAAQG,gBAAkB,IAAM,IAAKS,mBAAmBvB,mBAAmBU,IAEnF,oBAAoBmB,KAAKxB,EAAIF,YACxBC,uBACL,mGACAL,uBAAeS,WAIZH,IAWEyB,MAAQ,SAACC,EAASpB,gBAAToB,mBAASpB,GAA0BC,UAAW,IAAKC,OAAQ,MAC/E,IACE,GAAkB,iBAAPkB,EAAiB,MAAM,IAAIb,MAAM,oBAC5C,GAAW,KAAPa,EAAW,MAAO,GAClB,eAAeF,KAAKE,KAAKA,EAAKA,EAAGC,MAAM,KAAK,IAC3CrB,EAAQC,YAAWD,EAAQC,UAAY,KACvCD,EAAQE,SAAQF,EAAQE,OAAS,KAClCkB,EAAGE,WAAW,OAAMF,EAAKA,EAAGG,MAAM,IACtC,IAAMxB,EAAyB,GACzByB,EAAS,MACTC,EAAoBL,EAAGC,MAAMrB,EAAQC,WAGvCyB,EAAMD,EAAQnB,OACCoB,EAHH,MAGkBA,EAHlB,KAKhB,IAAoB,QAAAC,IAAAC,WAAAA,IAAS,CAAxB,IACGC,OAAUC,QAAQN,EAAQ,OAC1BO,EAAMF,EAAEG,QAAQhC,EAAQE,QAC1B+B,SACAC,SAEAH,GAAO,GACTE,EAAOJ,EAAEM,OAAO,EAAGJ,GACnBG,EAAOL,EAAEM,OAAOJ,EAAM,KAEtBE,EAAOJ,EACPK,EAAO,IAGT,IAAME,EAAIC,mBAAmBJ,GACvB3C,EAAI+C,mBAAmBH,GAExBnC,EAAIuC,eAAeF,GAEbvB,MAAMC,QAAQf,EAAIqC,IAC3BrC,EAAIqC,GAAGG,KAAKjD,GAEZS,EAAIqC,GAAK,CAAErC,EAAIqC,GAAI9C,GAJnBS,EAAIqC,GAAK9C,EAQb,OAAOS,EACP,MAAOL,GACP,MAAI,oBAAoBwB,KAAKxB,EAAIF,YACxBC,uBACL,8FACAL,uBAAeQ,OAIZF"}